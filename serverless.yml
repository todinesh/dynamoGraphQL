service: graphql-api

provider:
  name: aws
  runtime: nodejs8.10
  stage: local
  environment:
    SERVICE: ${self:service}
    STAGE: ${opt:stage, self:provider.stage}
    REGION: ${opt:region, self:provider.region}
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}
    AWS_ENDPOINT: http://localhost:8000/
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan  
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

custom:
  serverless-offline:
    port: 4000
    prefix: local
    stage: local
    region: local
  dynamodb:
    stages:
    - local
    start:
      port: 8000
      inMemory: true
      heapInitial: 100m
      heapMax: 500m
      migrate: true
      seed: true
      convertEmptyValues: true

functions:
  query:
    handler: handler.query
    events:
      - http:
          path: query
          method: get
          cors: true

plugins:
  - serverless-offline
  - serverless-dynamodb-local

resources:
  Resources:
    UserTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
          - AttributeName: firstName
            AttributeType: S          
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: firstName
            KeyType: RANGE  
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
